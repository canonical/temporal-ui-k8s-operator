# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.
#
# Learn more about testing at: https://juju.is/docs/sdk/testing


"""Temporal admin charm unit tests."""

# pylint:disable=protected-access

from unittest import TestCase

from ops.model import BlockedStatus
from ops.testing import Harness

from charm import TemporalUiK8SOperatorCharm


class TestCharm(TestCase):
    """Unit tests.

    Attrs:
        maxDiff: Specifies max difference shown by failed tests.
    """

    maxDiff = None

    def setUp(self):
        """Set up for the unit tests."""
        self.harness = Harness(TemporalUiK8SOperatorCharm)
        self.addCleanup(self.harness.cleanup)
        self.harness.set_can_connect("temporal-ui", True)
        self.harness.set_leader(True)
        self.harness.begin()

    def test_initial_plan(self):
        """The initial pebble plan is empty."""
        harness = self.harness
        initial_plan = harness.get_container_pebble_plan("temporal-ui").to_dict()
        self.assertEqual(initial_plan, {})

    def test_blocked_by_temporal_server(self):
        """The charm is blocked without a temporal:ui relation."""
        harness = self.harness

        # Simulate pebble readiness.
        container = harness.model.unit.get_container("temporal-ui")
        harness.charm.on.temporal_ui_pebble_ready.emit(container)

        # The BlockStatus is set with a message.
        self.assertEqual(
            harness.model.unit.status,
            # BlockedStatus("ui:temporal relation: server is not ready"),
            BlockedStatus("ui:temporal relation: not available"),
        )

    def test_ready(self):
        """The pebble plan is correctly generated when the charm is ready."""
        harness = self.harness

        # Add the temporal relation.
        harness.add_relation("ui", "temporal")

        simulate_lifecycle(harness)

        # The plan is generated after pebble is ready.
        want_plan = {
            "services": {
                "temporal-ui": {
                    "summary": "temporal ui",
                    "command": "./ui-server --env charm start",
                    "startup": "enabled",
                    "override": "replace",
                    "environment": {
                        "LOG_LEVEL": "info",
                    },
                }
            },
        }

        got_plan = harness.get_container_pebble_plan("temporal-ui").to_dict()
        self.assertEqual(got_plan, want_plan)

        # The service was started.
        service = harness.model.unit.get_container("temporal-ui").get_service("temporal-ui")
        self.assertTrue(service.is_running())


def simulate_lifecycle(harness):
    """Simulate a healthy charm life-cycle.

    Args:
        harness: ops.testing.Harness object used to simulate charm lifecycle.
    """
    # Simulate pebble readiness.
    container = harness.model.unit.get_container("temporal-ui")
    harness.charm.on.temporal_ui_pebble_ready.emit(container)

    # Simulate server readiness.
    app = type("App", (), {"name": "temporal-ui-k8s"})()
    relation = type(
        "Relation",
        (),
        {"data": {app: {"server_status": "ready"}}, "name": "ui", "id": 42},
    )()
    unit = type("Unit", (), {"app": app, "name": "temporal-ui-k8s/0"})()
    event = type("Event", (), {"app": app, "relation": relation, "unit": unit})()
    harness.charm._on_ui_relation_changed(event)


def make_ui_changed_event(rel_name):
    """Create and return a mock relation changed event.

    The event is generated by the relation with the given name.

    Args:
        rel_name: Relationship name.

    Returns:
        Event dict.
    """
    return type(
        "Event",
        (),
        {
            "data": {
                "server_status": "ready",
            },
            "relation": type("Relation", (), {"name": rel_name}),
        },
    )
